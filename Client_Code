#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <BLEClient.h>
#include <BLERemoteCharacteristic.h>

#define SERVICE_UUID        "12345678-1234-1234-1234-123456789abc"
#define CHARACTERISTIC_UUID "abcd1234-ab12-cd34-ef56-abcdef123456"

BLERemoteCharacteristic* pRemoteCharacteristic;
BLEAdvertisedDevice* myDevice;
bool doConnect = false;
bool connected = false;

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    if (advertisedDevice.haveServiceUUID() && advertisedDevice.isAdvertisingService(SERVICE_UUID)) {
      myDevice = new BLEAdvertisedDevice(advertisedDevice);
      doConnect = true;
      advertisedDevice.getScan()->stop();
    }
  }
};

void notifyCallback(BLERemoteCharacteristic* pChar, uint8_t* data, size_t length, bool isNotify) {
  Serial.print("📥 From Server: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)data[i]);
  }
  Serial.println();
}

bool connectToServer() {
  BLEClient* pClient = BLEDevice::createClient();
  if (!pClient->connect(myDevice)) return false;

  BLERemoteService* pService = pClient->getService(SERVICE_UUID);
  if (!pService) return false;

  pRemoteCharacteristic = pService->getCharacteristic(CHARACTERISTIC_UUID);
  if (!pRemoteCharacteristic) return false;

  if (pRemoteCharacteristic->canNotify()) {
    pRemoteCharacteristic->registerForNotify(notifyCallback);
  }

  connected = true;
  Serial.println("✅ Connected to server.");
  return true;
}

void setup() {
  Serial.begin(115200);
  BLEDevice::init("ESP32_BLE_Client");

  BLEScan* pScan = BLEDevice::getScan();
  pScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pScan->setInterval(1349);
  pScan->setWindow(449);
  pScan->setActiveScan(true);
  pScan->start(5, false);
}

void loop() {
  if (doConnect && !connected) {
    connectToServer();
    doConnect = false;
  }

  // 사용자가 Serial에 입력하면 → 서버에 메시지 전송
  if (connected && Serial.available()) {
    String input = Serial.readStringUntil('\n');
    pRemoteCharacteristic->writeValue(input.c_str(), input.length());
    Serial.print("📤 Sent to Server: ");
    Serial.println(input);
  }
}
